# -*- coding: utf-8 -*-
"""Pair-22-Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h5R2tqKQ0lJizNBoS3ySNlEN4E86bRFu

###I. Project Setup
We install Pyvis for interactive graph visualization, import necessary libraries for effective graph rendering, and mount Google Drive to access the Excel file. Additionally, we define a function to convert the Network object into HTML for display.
"""

# Install pyvis
!pip install pyvis

# Import necessary packages
import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from pyvis.network import Network
from IPython.core.display import display, HTML

# Import google drive
from google.colab import drive
drive.mount('/content/drive')

# Function to represent Network object as HTML
def net_repr_html(self):
  nodes, edges, height, width, options = self.get_network_data()                # Extract nodes, edges, height, width, and options data from the Network object
  html = self.template.render(height = height, width = width, nodes = nodes,    # Render the HTML template with extracted data
                              edges = edges, options = options)
  return html                                                                   # Return the rendered HTML

Network._repr_html_ = net_repr_html                                             # Set the _repre_html_ attribute of Network class to the net_repr_html function

"""###II. Prepare the Dataset
We utilize the Financial Accountability Report of DHSUD-NCR for FY 2023. We import the cleaned data as a Pandas DataFrame and introduce a new column titled 'abs_variance,' which computes the absolute variance between the Authorized Appropriations (initial budget) and Obligations (actual expenditure), reflecting discrepancies.

"""

data = "/content/drive/MyDrive/FAR1A_2023.xlsx"                                 # File path to the excel file
df = pd.read_excel(data, sheet_name="cleaned")                                  # Read the excel file into a DataFrame, specifying the sheet name
df['abs_variance'] = abs(df['Variance'])                                        # Create a new column 'abs_variance' containing the absolute value of the column Variance

df.head()                                                                       # Display the first 5 rows of the DataFrame

"""###III. Prepare the node and edge data
We create a network graph 'G' from the DataFrame using the 'from_pandas_edgelist' method. The 'source' and 'target' parameters specify the column names in the DataFrame representing each edge's source and target nodes, respectively. Then, we verify accuracy by retrieving the first five nodes and edges.
"""

G = nx.from_pandas_edgelist(df, source = 'Parent', target = 'Child')            # Import the dataframe to networkx
list(G.nodes(data = True))[0:5]                                                 # Show the first 5 nodes of G

list(G.edges(data = True))[0:5]                                                 # Show the first 5 edges of G

"""###IV. Draw Network Graph with Networkx and Pivys
We set up a plot to specify the figure size and draw a graph using Networkx. However, the resulting layout lacks aesthetic appeal and intuitive parameters for analysis.

To address this issue, we visualize the network graph with Pyvis. We define the function 'show_graph' to visualize the graph, with nodes color-coded based on their shortest path lengths from the 'Expenses' node. A Pyvis network object gets instantiated with specific attributes. Then, we convert the Networkx graph 'G' into a Pyvis network using the 'from_nx()' method. The function iterates over each node in the Pyvis network, retrieves the corresponding shortest path length from the previously calculated dictionary of shortest paths, computes color for each node, converts it to hexadecimal format using the 'rgb2hex()' function, assigns the calculated color to the color attribute of the node. Finally, the visualization is saved to an HTML file using the 'show()' method and displayed using the 'display()' function.
"""

# Networkx Default Layout
plt.figure(figsize = (5, 5))                                                    # Set the figure size for the plot
nx.draw(G)                                                                      # Draw the Networkx graph G using the default layout
plt.show()                                                                      # Display the plot

def show_graph():                                                               # Create a function to show Pyvis Default Layout with color
    shortest_paths = nx.shortest_path_length(G, 'Expenses')                     # Calculate the shortest path from the 'Expenses' node to the other nodes
    max_length = max(shortest_paths.values())                                   # Determine the maximum shortest path length
    net = Network(width = '1000px', height = '800px', directed = True,
                  notebook = True, cdn_resources = 'in_line')                   # Create a Pyvis network object with specified attributes
    net.from_nx(G)                                                              # Convert the Networkx graph G to a Pyvis network

    for node in net.nodes:                                                      # Iterate over each node in the Pyvis network
      length = shortest_paths[node['id']]                                       # Retrieve the shortest path length for the current node
      color = plt.cm.cool(length / max_length)                                  # Calculate the color for the node based on its shortest path length
      hex_color = mcolors.rgb2hex(color[:3])                                    # Convert RGBA color to hexadecimal
      node['color'] = hex_color                                                 # Assign the calculated color to the 'color' attribute of the node

    net.show('expenses.html')                                                   # Save the Pyvis viz to an HTML file
    display(HTML('expenses.html'))                                              # Display the HTML file

show_graph()                                                                    # Call the function to display the graph

"""###V. Refine Visualization and Configuration
Setting node and edge attributes is paramount to conveying vital analysis information. We begin by creating dictionaries that contain relevant node details, including absolute variances and information on Authorized Appropriations, Adjustments, and Obligations. Subsequently, we generate title information for each node and build a dictionary to store the edge attributes. Finally, we apply node and edge attributes accordingly before displaying the graph visualization.
"""

# Dictionary of Complete Information
info_dict = {child: [auth_app, adj, ob] for child, auth_app, adj,
             ob in zip(df['Child'], df['Authorized Appropriations'],
                       df['Adjustments'], df['Obligations'])}

ps_values = info_dict['Personnel Services']                                     # Extract the value of 'Personnel Services'
mooe_values = info_dict['Maintenance and Other Operating Expenses']             # Extract the value of 'Maintenance and Other Operating Expenses'
expenses_values = [sum(x) for x in zip(ps_values, mooe_values)]                 # Calculate the total 'Expenses' by summing ps_values and mooe_values

info_dict['Expenses'] = expenses_values                                         # Add expenses_values to the info_dict

# Dictionary of Title Values
title_dict = {}
for node in G.nodes:                                                            # Iterate through each node of the graph
  title_dict[node] = f'Line Item: {node}\n Authorized Appropriations: \
  {info_dict[node][0]}\n Adjusted Appropriations: {info_dict[node][1]}\n \
  Actual Obligations: {info_dict[node][2]}'                                     # Generate title information for each node

# Dictionary of Edges
edge_dict = {(row['Parent'], row['Child']): {'value': row['abs_variance'], \
'title': f'Absolute Variance: {row.abs_variance}'} for _, row in df.iterrows()}

# Set the node and edge attributes
appropriation_val = {key: value[0] for key, value in info_dict.items()}         # Extract authorized information for each node
nx.set_node_attributes(G, appropriation_val, 'value')                           # Set node attributes for value
nx.set_node_attributes(G, title_dict, 'title')                                  # Set node attributes for title
nx.set_edge_attributes(G, edge_dict)

# Show the graph
show_graph()

"""### VI. Perform analysis and derive insights
The graph provides a comprehensive overview of Expenses appropriated and obligated throughout FY 2023, offering valuable insights into financial dynamics. Node sizes correspond to the Approved Appropriations, visually representing the magnitude of each category’s allocation. Edge width indicates the variance between appropriations and obligations, highlighting adjustments made over time.

The largest node, ‘Expenses,’ encompasses all line item allocations. Within this category, ‘Personnel Services’ (PS) and ‘Maintenance and Other Operating Expenses’ (MOOE) emerge as subclasses, each branching into various groups and objects. The ‘Basic Salary’ within PS stands out, indicating a significant allocation towards compensating employees and underscoring their role in fulfilling agency objectives. Additionally, ‘Other Professional Services’ receives substantial funding, reflecting a reliance on Contract of Service Personnel to supplement the workforce.

Hovering each node reveals essential details, enhancing the viewer’s understanding of the fiscal landscape. Edge width, dynamically adjusted to represent the absolute variance between appropriation and obligation, serves as a gauge of PFM agility and adaptability. ‘Basic Salary’ exhibits the most significant adjustment, reflecting fluidity in meeting personal needs. ‘Utility Expenses’ and ‘General Services Expenses’ also reflect operational requirements and resource allocation strategies.

"""